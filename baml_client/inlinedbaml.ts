/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\nclient<llm> GeminiFlash25 {\n  provider google-ai\n  options {\n    model \"gemini-2.5-flash\"\n    api_key env.GOOGLE_API_KEY\n  }\n}\n\nclient<llm> GeminiPro25 {\n  provider google-ai\n  options {\n    model \"gemini-2.5-pro\"\n    api_key env.GOOGLE_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}\n",
  "create_answer.baml": "function CreateAnswer(\n    current_date: string,\n    research_topic: string,\n    summaries: SearchResult[],\n) -> string {\n    client \"google-ai/gemini-2.5-pro\"\n    prompt #\"\n        Generate a high-quality answer formatted in markdown to the user's question based on the provided summaries.\n\n        Instructions:\n        - The current date is {{current_date}}.\n        - You are the final step of a multi-step research process, don't mention that you are the final step. \n        - You have access to all the information gathered from the previous steps.\n        - You have access to the user's question.\n        - Generate a high-quality answer to the user's question based on the provided summaries and the user's question.\n        - To include the sources you used from the Summaries in the answer correctly, use markdown footnotes. This creates a superscript number with a link to jump to the footnote. You can put footnotes anywhere in the document except inside other markdown elements like blocks, lists, and tables. \n        - When you use a footnote, you should use the id of the summary as the footnote id - the links at the bottom of the document will be added _for you_ - there is no need to add them yourself.\n        - If you use a footnote, you need to make sure that the ID of the footnote EXACTLY matches the ID of the summary.\n\n        <markdown_footnotes_example>\n            Here's a simple footnote,[^abc789a] and here's a longer one.[^90fdaha]\n\n            Note that the citations will be added for you - there is no need to add them yourself. They will be auto-generated like this:\n            [^abc789a]: This is the first footnote.\n\n            [^90fdaha]: Here's another footnote.\n\n            Here are two footnotes in a row: [^abcdefg,hijklmn]\n        </markdown_footnotes_example>\n\n        Very important instructions:\n        - if the information is not sufficient, you should indicate to the user that you don't have enough information to answer the question.\n        - make sure to indicate how confident you are in the answer, and why.\n        - Never use tables in your answer - you many use newlines, bold, italics, lists, links, and footnotes. \n\n        User Context:\n        - {{research_topic}}\n\n        Summaries:\n        <summaries>\n        {% for summary in summaries %}\n            <summary>\n                <id>{{summary.id}}</id>\n                <title>{{summary.title}}</title>                \n                <url>{{summary.url}}</url>\n                <highlights>{{summary.highlights}}</highlights>\n                <text>{{summary.text}}</text>\n            </summary>\n        {% endfor %}\n        </summaries>\n\n        Reflect carefully on all the the summaries and the user's question to provide an answer.\n        {{ctx.output_format}}\n\n    \"#\n}\n",
  "generate_query.baml": "/// Generate an optimized query (or several) for web research\nfunction GenerateQuery(\n    args: GenerateQueryArgs,\n) -> SearchQueryList {\n    client \"google-ai/gemini-2.5-flash\"\n    prompt #\"\n    \n        {{ _.role(\"system\")}}\n        Your goal is to generate sophisticated and diverse web search queries AND create a comprehensive query plan. These queries are intended for an advanced automated web research tool capable of analyzing complex results, following links, and synthesizing information.\n\n        Instructions for Search Queries:\n        - Always prefer a single search query, only add another query if the original question requests multiple aspects or elements and one query is not enough.\n        - Each query should focus on one specific aspect of the original question.\n\n        {% if args.number_queries == 1 %}\n        - Generate 1 query.\n        {% elif args.number_queries %}\n        - Don't produce less than 2 queries.\n        - Don't produce more than {{args.number_queries}} queries.\n        {% else %}\n        - Generate a few queries\n        {% endif %}\n        - Queries should be diverse, if the topic is broad, generate more than 1 query to get sufficient coverage of different keywords and assumptions.\n        - Don't generate multiple similar queries, 1 is enough.\n        - Queries should be specific and not too broad. Make sure to include important qualifiers and modifiers.\n        - Query should ensure that the most current information is gathered. The current date is {{args.current_date}}.\n        - We are using Exa's Search API so the queries should not use google-specific search operators\n        - If the query is complicated or multi-part (e.g. about multiple different people, businesses, entities or topics), break it down into multiple queries.\n\n        Instructions for Query Plan:\n        - Create a comprehensive list of specific questions that need to be answered to fully satisfy the user's research topic by deconstructing the research topic into smaller, more specific questions\n        - These questions should be detailed and specific, covering all aspects of the research topic\n        - Questions should not include information which you already know the answer to, such as common knowledge.\n        - The questions should be answerable through web research and should guide the evaluation of whether research is complete\n        - Think about what a complete answer to the research topic would need to include, then break that down into specific questions\n        - Questions should be comprehensive enough that if all are answered, the research topic is fully addressed\n        - They should follow the SMART: Specific, Measurable, Achievable, and Relevant criteria.\n\n        The research topic is provided between <research_topic></research_topic> XML tags below.\n        <research_topic>\n        {{ args.research_topic}}\n        </research_topic>\n\n        <output_format>\n        {{ ctx.output_format }}\n        </output_format>\n    \"#\n}\n\n",
  "generate_query.test.baml": "test NapthaAiFunding {\n    functions [GenerateQuery]\n    args {\n        args {\n            research_topic \"What is Naptha AI's most recent funding round in terms of dollars raised and the round size? (pre-seed, seed,Series A, Series B, Series C, Series D)\"\n            current_date \"06/24/2025\"\n        }\n\n    }\n}\n\ntest ConstellateAIFunding {\n    functions [GenerateQuery]\n    args {\n       args {\n            research_topic \"What is Constellate AI's most recent funding round in terms of dollars raised and the round size? (pre-seed, seed,Series A, Series B, Series C, Series D)\"\n            number_queries 10\n            current_date: \"06/24/2025\"\n       }\n    }\n}\n\ntest HumanLayerFunding {\n    functions [GenerateQuery]\n    args {\n        args {\n            research_topic \"What is Human Layer's most recent funding round in terms of dollars raised and the round size? (pre-seed, seed,Series A, Series B, Series C, Series D)\"\n            number_queries 10\n            current_date: \"06/24/2025\"\n        }\n    }\n}   \n\ntest BoundaryMLFunding {\n    functions [GenerateQuery]\n    args {\n        args {\n            research_topic \"What is BoundaryML's most recent funding round in terms of dollars raised and the round size? (pre-seed, seed,Series A, Series B, Series C, Series D)\"\n            number_queries 10\n            current_date: \"06/24/2025\"\n        }\n    }\n}",
  "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"typescript\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.90.2\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
  "reflect.baml": "function Reflect(\n    summaries: SearchResult[],\n    research_topic: string,\n    current_date: string,\n    queryPlan: string[],\n    completedQuestions: int[],\n    unansweredQuestions: int[],\n    currentRound: int,\n    maxRounds: int,\n) -> Reflection {\n    client \"google-ai/gemini-2.5-pro\"\n    prompt #\"\n    You are an expert research assistant analyzing summaries about \"{{research_topic}}\".\n\n    The current date is {{current_date}}.\n    \n    Research Progress: This is round {{currentRound}} of {{maxRounds}} maximum rounds.\n\n    Query Plan:\n    The following questions were previously identified as needing to be answered to fully satisfy the research topic:\n    {% for index in range(queryPlan|length) %}\n    - {{index}} [{% if index in completedQuestions %}Answered{% else %}Unanswered{% endif %}] {{queryPlan[index]}}\n    {% endfor %}\n\n    Instructions:\n    - Use the query plan to evaluate if the information provided in the summaries below is sufficient to answer the user's question; focusing on the unanswered parts of the query plan\n    - For each unanswered question in the query plan, determine if it has been sufficiently answered by the search results from this round\n    - Identify which questions from the plan have been answered and which still need addressing\n    - ONLY set isSufficient to true if ALL questions in the query plan have been comprehensively answered with specific, concrete evidence\n    - Be conservative: if there's any doubt about whether a question has been fully answered, mark it as unanswered\n    - If some questions remain unanswered OR if the answers lack specific details, set isSufficient to false and generate follow-up queries to address the remaining questions\n    - Require concrete facts, numbers, dates, and specific details - not just general information - to consider a question answered\n    \n    Round-Specific Guidance:\n    {% if currentRound <= 3 %}\n    - EARLY RESEARCH PHASE: Be extra conservative. It's very unlikely that complex research questions can be fully answered in just {{currentRound}} rounds\n    - Only mark research as sufficient if you have overwhelming evidence for ALL questions\n    - Prefer to continue researching rather than conclude prematurely\n    {% elif currentRound >= maxRounds - 1 %}\n    - FINAL RESEARCH PHASE: You're near the end of available rounds. Be more decisive about what constitutes sufficient information\n    - Focus on whether you have enough information to provide a meaningful answer, even if not perfect\n    {% endif %}\n\n    CRITICAL - Relevant Summary Selection for This Round:\n    - You are analyzing summaries from THIS ROUND of searches only\n    - Identify which of these summaries contain information that is DIRECTLY relevant to answering the research topic or addressing the query plan\n    - A summary should be marked as relevant if it contains information that helps answer any part of the research question or query plan\n    - Be selective but not overly restrictive - include summaries that provide useful context, facts, or insights related to the research topic\n    - Include the summary IDs (not indexes) in the relevantSummaryIds field for summaries that contribute meaningful information\n    \n    If the information in the summaries is insufficient to answer all questions in the query plan:\n    - Identify knowledge gaps based on the unanswered questions from the query plan\n    - Generate follow-up queries that specifically target the unanswered questions\n    - Ensure follow-up queries are designed to find information that addresses the specific unanswered questions\n\n    Requirements:\n    - Ensure the follow-up queries are self-contained web search queries\n    - Each should contain the necessary context AND simplicity to be used as a web search. \n    - Avoid highly complicated follow-up queries, and avoid overly-broad queries. \n\n    Follow-Up queries structuring:\n    - If the query is complicated or multi-part (e.g. about multiple different entities or topics), break it down into multiple queries.\n    - If you generate multiple queries, make sure they are diverse and not similar.\n    - Queries should be diverse, if the topic is broad, generate more than 1 query to get sufficient coverage of different keywords and assumptions.\n    - Don't generate multiple similar queries, 1 is enough.\n    - Queries should be specific and not too broad. Make sure to include important qualifiers and modifiers.\n    - We are using Exa's Search API so the queries should not use google-specific search operators\n\n    Current Round's Search Results:\n    <summaries>\n    {% for summary in summaries %}\n        <summary>\n            <title>{{summary.title}}</title>\n            <url>{{summary.url}}</url>\n            <highlights>{{summary.highlights}}</highlights>\n            <id>{{summary.id}}</id>\n            <text>{{summary.text}}</text>\n        </summary>\n    {% endfor %}\n    </summaries>\n\n    Reflect carefully on these summaries against the query plan, identify which summaries are relevant for answering the research topic, and determine which questions have been answered. Then, produce your output following this JSON format:\n    {{ctx.output_format}}\n    \"#\n}",
  "types.baml": "class GenerateQueryArgs {\n    research_topic string\n    current_date string\n    number_queries int?\n}\n// State management types for the research workflow\nclass SearchQueryList {\n    queryPlan string[] @description(\"A list of specific questions that need to be answered to satisfy the user's research topic. These questions will be used to determine if the research is complete.\")\n    query string[] @description(\"A list of search queries to be used for web research.\")\n    rationale string @description(\"A brief explanation of why these queries are relevant to the research topic, addressed as though you were speaking to a user explaining what you are doing\")\n}\n\nclass Reflection {\n    isSufficient bool @description(\"Whether the provided summaries are sufficient to answer the user's question and any remaining unanswered questions from the query plan\")\n    answeredQuestions int[] @description(\"IDs of questions from the query plan that have been sufficiently answered based on the current search results\")\n    unansweredQuestions int[] @description(\"IDs of questions from the query plan that still need to be addressed\")\n    knowledgeGap string? @description(\"A description of what information is missing or needs clarification, if isSufficient is false\")\n    followUpQueries string[]? @description(\"A list of follow-up web search queries to be researched to address the knowledge gap, if isSufficient is false. Remember that we are using Exa's Search API so the queries should not use google-specific search operators\")\n    followupQueriesRationale string[]? @description(\"Your rationale for why these follow-up queries are relevant to the research topic in the context of the knowledge gap, addressed as though you were speaking to a user explaining what you are doing (if isSufficient is false)\")\n    relevantSummaryIds string[] @description(\"IDs of summaries that contain unique, relevant information for answering the research topic and query plan. Only include summaries that contain information which is directly relevant to the research topic/query plan and which is not already contained by other summaries\")\n}\n\n\nclass Message {\n    role string @description(\"The role of the message sender (e.g., 'user', 'assistant', 'system')\")\n    content string @description(\"The content of the message\")\n}\n\n\nclass ReflectionState {\n    is_sufficient bool @description(\"Whether the current information is sufficient\")\n    knowledge_gap string @description(\"Description of the knowledge gap identified\")\n    follow_up_queries string[] @description(\"Follow-up queries to address knowledge gaps\")\n    research_loop_count int @description(\"Current research loop count\")\n    number_of_ran_queries int @description(\"Number of queries that have been executed\")\n}\n\nclass Query {\n    query string @description(\"The search query string\")\n    rationale string @description(\"Rationale for why this query is needed\")\n}\n\nclass QueryGenerationState {\n    search_query Query[] @description(\"List of generated queries with rationales\")\n}\n\nclass WebSearchState {\n    search_query string @description(\"The search query to execute\")\n    id string @description(\"Unique identifier for the search\")\n}\n\nclass SearchStateOutput {\n    running_summary string? @description(\"Final report or running summary of research\")\n} \n\nclass SearchResult {\n    url string @description(\"The URL of the search result\")\n    id string @description(\"The ID of the search result\")\n    title string? | null @description(\"The title of the search result\")\n    highlights string[] @description(\"The highlights of the search result\")\n    highlightScores float[] @description(\"The highlight scores of the search result\")\n    text string @description(\"The text of the search result\")\n}",
}
export const getBamlFiles = () => {
    return fileMap;
}