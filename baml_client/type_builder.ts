/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import { FieldType } from '@boundaryml/baml/native'
import { TypeBuilder as _TypeBuilder, EnumBuilder, EnumViewer, ClassBuilder, ClassViewer } from '@boundaryml/baml/type_builder'
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

export default class TypeBuilder {
    private tb: _TypeBuilder;
    
    InsufficientReflection: ClassViewer<'InsufficientReflection', "isSufficient" | "knowledgeGap" | "followUpQueries">;
    
    Message: ClassViewer<'Message', "role" | "content">;
    
    OverallState: ClassViewer<'OverallState', "messages" | "search_query" | "web_research_result" | "sources_gathered" | "initial_search_query_count" | "max_research_loops" | "research_loop_count" | "reasoning_model">;
    
    Query: ClassViewer<'Query', "query" | "rationale">;
    
    QueryGenerationState: ClassViewer<'QueryGenerationState', "search_query">;
    
    ReflectionState: ClassViewer<'ReflectionState', "is_sufficient" | "knowledge_gap" | "follow_up_queries" | "research_loop_count" | "number_of_ran_queries">;
    
    SearchQueryList: ClassViewer<'SearchQueryList', "query" | "rationale">;
    
    SearchResult: ClassViewer<'SearchResult', "url" | "id" | "title" | "highlights" | "highlightScores" | "text">;
    
    SearchStateOutput: ClassViewer<'SearchStateOutput', "running_summary">;
    
    SufficientReflection: ClassViewer<'SufficientReflection', "isSufficient">;
    
    WebSearchState: ClassViewer<'WebSearchState', "search_query" | "id">;
    
    

    constructor() {
        this.tb = new _TypeBuilder({
          classes: new Set([
            "InsufficientReflection","Message","OverallState","Query","QueryGenerationState","ReflectionState","SearchQueryList","SearchResult","SearchStateOutput","SufficientReflection","WebSearchState",
          ]),
          enums: new Set([
            
          ]),
          runtime: DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
        });
        
        this.InsufficientReflection = this.tb.classViewer("InsufficientReflection", [
          "isSufficient","knowledgeGap","followUpQueries",
        ]);
        
        this.Message = this.tb.classViewer("Message", [
          "role","content",
        ]);
        
        this.OverallState = this.tb.classViewer("OverallState", [
          "messages","search_query","web_research_result","sources_gathered","initial_search_query_count","max_research_loops","research_loop_count","reasoning_model",
        ]);
        
        this.Query = this.tb.classViewer("Query", [
          "query","rationale",
        ]);
        
        this.QueryGenerationState = this.tb.classViewer("QueryGenerationState", [
          "search_query",
        ]);
        
        this.ReflectionState = this.tb.classViewer("ReflectionState", [
          "is_sufficient","knowledge_gap","follow_up_queries","research_loop_count","number_of_ran_queries",
        ]);
        
        this.SearchQueryList = this.tb.classViewer("SearchQueryList", [
          "query","rationale",
        ]);
        
        this.SearchResult = this.tb.classViewer("SearchResult", [
          "url","id","title","highlights","highlightScores","text",
        ]);
        
        this.SearchStateOutput = this.tb.classViewer("SearchStateOutput", [
          "running_summary",
        ]);
        
        this.SufficientReflection = this.tb.classViewer("SufficientReflection", [
          "isSufficient",
        ]);
        
        this.WebSearchState = this.tb.classViewer("WebSearchState", [
          "search_query","id",
        ]);
        
        
    }

    __tb() {
      return this.tb._tb();
    }

    string(): FieldType {
        return this.tb.string()
    }

    literalString(value: string): FieldType {
        return this.tb.literalString(value)
    }

    literalInt(value: number): FieldType {
        return this.tb.literalInt(value)
    }

    literalBool(value: boolean): FieldType {
        return this.tb.literalBool(value)
    }

    int(): FieldType {
        return this.tb.int()
    }

    float(): FieldType {
        return this.tb.float()
    }

    bool(): FieldType {
        return this.tb.bool()
    }

    list(type: FieldType): FieldType {
        return this.tb.list(type)
    }

    null(): FieldType {
        return this.tb.null()
    }

    map(key: FieldType, value: FieldType): FieldType {
        return this.tb.map(key, value)
    }

    union(types: FieldType[]): FieldType {
        return this.tb.union(types)
    }

    addClass<Name extends string>(name: Name): ClassBuilder<Name> {
        return this.tb.addClass(name);
    }

    addEnum<Name extends string>(name: Name): EnumBuilder<Name> {
        return this.tb.addEnum(name);
    }

    addBaml(baml: string): void {
        this.tb.addBaml(baml);
    }
}