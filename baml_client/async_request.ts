/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio } from "@boundaryml/baml"
import { toBamlError, HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type * as types from "./types"
import type {InsufficientReflection, Message, OverallState, Query, QueryGenerationState, ReflectionState, SearchQueryList, SearchResult, SearchStateOutput, SufficientReflection, WebSearchState} from "./types"
import type TypeBuilder from "./type_builder"

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
  env?: Record<string, string | undefined>
}

export class AsyncHttpRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  async CreateAnswer(
      current_date: string,research_topic: string,summaries: string[],
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "CreateAnswer",
        {
          "current_date": current_date,"research_topic": research_topic,"summaries": summaries
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateQuery(
      research_topic: string,number_queries: number,current_date: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateQuery",
        {
          "research_topic": research_topic,"number_queries": number_queries,"current_date": current_date
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async Reflect(
      summaries: string,research_topic: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "Reflect",
        {
          "summaries": summaries,"research_topic": research_topic
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async WebSearch(
      current_date: string,research_topic: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "WebSearch",
        {
          "current_date": current_date,"research_topic": research_topic
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export class AsyncHttpStreamRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  async CreateAnswer(
      current_date: string,research_topic: string,summaries: string[],
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "CreateAnswer",
        {
          "current_date": current_date,"research_topic": research_topic,"summaries": summaries
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateQuery(
      research_topic: string,number_queries: number,current_date: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateQuery",
        {
          "research_topic": research_topic,"number_queries": number_queries,"current_date": current_date
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async Reflect(
      summaries: string,research_topic: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "Reflect",
        {
          "summaries": summaries,"research_topic": research_topic
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async WebSearch(
      current_date: string,research_topic: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "WebSearch",
        {
          "current_date": current_date,"research_topic": research_topic
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}