/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { Image, Audio } from "@boundaryml/baml"

/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}


export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export interface GenerateQueryArgs {
  research_topic: string
  current_date: string
  number_queries?: number | null
  
}

export interface Message {
  role: string
  content: string
  
}

export interface Query {
  query: string
  rationale: string
  
}

export interface QueryGenerationState {
  search_query: Query[]
  
}

export interface Reflection {
  isSufficient: boolean
  answeredQuestions: number[]
  unansweredQuestions: number[]
  knowledgeGap?: string | null
  followUpQueries?: string[] | null
  followupQueriesRationale?: string[] | null
  relevantSummaryIds: string[]
  
}

export interface ReflectionState {
  is_sufficient: boolean
  knowledge_gap: string
  follow_up_queries: string[]
  research_loop_count: number
  number_of_ran_queries: number
  
}

export interface SearchQueryList {
  queryPlan: string[]
  query: string[]
  rationale: string
  
}

export interface SearchResult {
  url: string
  id: string
  title?: string | null | null | null
  highlights: string[]
  highlightScores: number[]
  text: string
  
}

export interface SearchStateOutput {
  running_summary?: string | null
  
}

export interface WebSearchState {
  search_query: string
  id: string
  
}
